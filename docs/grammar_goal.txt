program -> delcaration* EOF ;

declaration -> varDecl | constDecl | statement;

varDecl -> "var" IDENTIFIER ( "=" expression )? ";" ;

constDecl -> "const" IDENTIFIER "=" expression ";" ;

statement ->
	  assertStmt
	| breakStmt
	| continueStmt
	| doStmt
	| forStmt
	| ifStmt
	| importStmt
	| printStmt
	| returnStmt
	| switchStmt
	| whileStmt
	| block
	| ";"
	| exprStmt
;

assertStmt -> "assert" expression "," expression ";" ;

breakStmt -> "break" ";" ;

continueStmt -> "continue" ";" ;

doStmt -> "do" statement "while" "(" expression ")" ";" ;

forStmt -> "for" "(" ( varDecl | constDecl | exprStmt | ";") expression? ";" expression ")" statement ;

ifStmt -> "if" "(" expression ")" statement ( "else" statement )? ;

importStmt -> "import" STRING ( "as" IDENTIFIER )? ";" ;

printStmt -> "print" expression ";" ;

returnStmt -> "return" expression? ";" ;

switchStmt ->
	"switch" "(" expression ")" "{"
	( "case" expression ":" declaration* )*
	(
		( "default" ":" declaration* )
		( "case" expression ":" declaration* )*
	)?
	"}"
;

whileStmt -> "while" "(" expression ")" statement ;

block -> "{" delcaration* "}" ;

exprStmt -> expression ";" ;

expression -> assignment ;

assignment -> IDENTIFIER ( "[" primary "]" )* ( "=" | "+=" | "-=" | "*=" | "/=" | "%=" ) expression | ternary ;

ternary -> or ( "?" expression ":" expression )? ;

or -> and ( "||" or )* ;

and -> equality ( "&&" and )* ;

equality -> equality ( ("==" | "!=" ) comparison )* | comparison ;

comparison -> comparison ( ( ">" | ">=" | "<" | "<=" ) addition )* | addition ;

addition -> addition ( ( "-" "+" ) multiplication )* | multiplication ;

multiplication -> unary ( ( "*" | "/" | "%" ) unary )* ;

unary -> ( "!" | "-" ) unary | prefix ;

prefix -> ( "++" | "--" ) IDENTIFIER | postfix ;

postfix -> IDENTIFIER ( "++" | "--" ) | call ;

call -> primary ( "(" arguments? ")" | "[" slice "]" | "." IDENTIFIER | "|>" expression | "<|" expression )* ;

arguments -> expression ( "," expression )* ;

slice -> primary | primary? ":" primary? ( ":" primary )? ;

primary -> "true" | "false" | "null" | NUMBER | STRING | IDENTIFIER | function | array | dictionary | event | "(" expression ")" ;

function -> ( "(" parameters ")" | IDENTIFIER ) "=>" ( expression | block ) ;

parameters -> IDENTIFIER ( "," IDENTIFIER )* ;

array -> "[" ( primary ( "," primary )* )? "]" ;

dictionary -> "[" ( primary ":" primary ( "," primary : primary )* | ":" ) "]" ;

event -> "[" "..." "]" ;

-------------------------------------------------------------------------------

