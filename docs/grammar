# basic example of syntax

expression -> literal
	| unary
	| binary
	| grouping
	;

literal -> NUMBER | STRING | "true" | "false" | "null" ;

unary -> ( "-" | "!" ) expression ;

binary -> expression operator expression ;

grouping -> "(" expression ")" ;

operator -> "+" | "-" | "*" | "/" | "%"
	| "==" | "!=" | ">" | "<" | ">=" | "<=" ;

-------------------------------------------------------------------------------

program -> delcaration* EOF ;

declaration -> varDecl | constDecl | statement;

varDecl -> "var" IDENTIFIER ( "=" expression )? ";" ;

constDecl -> "const" IDENTIFIER "=" expression ";" ;

statement -> exprStmt
	| printStmt
	| block
	;

exprStmt -> expression ";" ;

printStmt -> "print" expression ";" ;

block -> "{" delcaration* "}" ;

expression -> assignment ;

assignment -> IDENTIFIER ( "=" | "+=" | "-=" | "*=" | "/=" | "%=" ) expression | ternary ;

ternary -> or ( "?" expression ":" expression )? ;

or -> and ( "||" or )* ;

and -> equality ( "&&" and )* ;

equality -> equality ( ("==" | "!=" ) comparison )* | comparison ;

comparison -> comparison ( ( ">" | ">=" | "<" | "<=" ) addition )* | addition ;

addition -> addition ( ( "-" "+" ) multiplication )* | multiplication ;

multiplication -> unary ( ( "*" | "/" | "%" ) unary )* ;

unary -> ( "!" | "-" ) unary | prefix ;

prefix -> ( "++" | "--" ) IDENTIFIER | postfix ;

postfix -> IDENTIFIER ( "++" | "--" ) | primary ;

primary -> NUMBER | STRING | IDENTIFIER | "true" | "false" | "null" | "(" expression ")" ;

-------------------------------------------------------------------------------

