#ifndef CTOY_CHUNK_H
#define CTOY_CHUNK_H

#include "common.h"
#include "value.h"
#include "object.h"
#include "table.h"

typedef enum {
	//return
	OP_RETURN = 0,

	//constants
	OP_CONSTANT,
	OP_CONSTANT_LONG, //for more than 256 constants

	//atomic values
	OP_NIL,
	OP_TRUE,
	OP_FALSE,

	//operators
	OP_EQUAL,
	OP_GREATER,
	OP_LESS,
	OP_NOT,
	OP_NEGATE,
	OP_ADD,
	OP_SUBTRACT,
	OP_MULTIPLY,
	OP_DIVIDE,

	//keywords
	OP_PRINT,

	//internals
	OP_POP,
	OP_DEFINE_GLOBAL_VAR,
	OP_DEFINE_GLOBAL_VAR_LONG,
	//TODO: consts
	OP_SET_GLOBAL,
	OP_SET_GLOBAL_LONG,
	OP_GET_GLOBAL,
	OP_GET_GLOBAL_LONG,
} OpCode;

typedef struct {
	int capacity;
	int count;
	uint8_t* code;
	int* lines;
	ValueArray constants; //literals like numbers, varnames
	Table strings; //track the Toy strings used in this chunk
	Object* objects; //track the memory generated by this chunk
} Chunk;

void initChunk(Chunk* chunk);
void freeChunk(Chunk* chunk);
void writeChunk(Chunk* chunk, uint8_t byte, int line);
void writeChunkLong(Chunk* chunk, uint32_t val, int line);

//utilities
uint32_t pushConstant(Chunk* chunk, Value value);
uint32_t writeConstant(Chunk* chunk, Value value, int line);

#endif
