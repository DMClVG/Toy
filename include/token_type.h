#ifndef CTOY_TOKEN_TYPE_H
#define CTOY_TOKEN_TYPE_H

typedef enum {
	//single character tokens
	TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,
	TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,
	TOKEN_LEFT_BRACKET, TOKEN_RIGHT_BRACKET,
	TOKEN_SEMICOLON, TOKEN_COMMA,

	//one or two character tokens
	TOKEN_PLUS, TOKEN_PLUS_EQUAL, TOKEN_PLUS_PLUS,
	TOKEN_MINUS, TOKEN_MINUS_EQUAL, TOKEN_MINUS_MINUS,
	TOKEN_STAR, TOKEN_STAR_EQUAL,
	TOKEN_SLASH, TOKEN_SLASH_EQUAL,
	TOKEN_MODULO, TOKEN_MODULO_EQUAL,

	TOKEN_BANG, TOKEN_BANG_EQUAL,
	TOKEN_EQUAL, TOKEN_EQUAL_EQUAL, TOKEN_EQUAL_GREATER, //EQUAL_GREATER is for the arrow syntax
	TOKEN_GREATER, TOKEN_GREATER_EQUAL,
	TOKEN_LESS, TOKEN_LESS_EQUAL, TOKEN_LESS_OR,

	//these can ONLY be doubles
	TOKEN_AND_AND,
	TOKEN_OR_OR,
	TOKEN_OR_GREATER,

	//these can single OR triple
	TOKEN_DOT, TOKEN_DOT_DOT_DOT,

	//ternary operator
	TOKEN_QUESTION, TOKEN_COLON,

	//literals
	TOKEN_IDENTIFIER, TOKEN_NUMBER, TOKEN_STRING,

	//keywords (nil = null)
	TOKEN_NIL, TOKEN_PRINT, TOKEN_IMPORT, TOKEN_AS, TOKEN_VAR, TOKEN_CONST, TOKEN_TRUE, TOKEN_FALSE, TOKEN_RETURN,
	TOKEN_IF, TOKEN_ELSE, TOKEN_DO, TOKEN_WHILE, TOKEN_FOR, TOKEN_FOREACH, TOKEN_IN, TOKEN_OF, TOKEN_BREAK, TOKEN_CONTINUE, TOKEN_ASSERT,

	TOKEN_PASS, TOKEN_ERROR, TOKEN_EOF
} TokenType;

#endif
