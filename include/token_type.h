#ifndef TOY_TOKEN_TYPE_H_
#define TOY_TOKEN_TYPE_H_

typedef enum TokenType {
	//type keywords
	TOKEN_NULL,
	TOKEN_BOOL,
	TOKEN_INT,
	TOKEN_FLOAT,
	TOKEN_STRING,
	TOKEN_ARRAY,
	TOKEN_DICT,
	TOKEN_FUNC,

	//other keywords
	TOKEN_PRINT,
	TOKEN_RETURN,
	TOKEN_VAR,
	TOKEN_CONST,

	TOKEN_IMPORT,
	TOKEN_EXPORT,
	TOKEN_AS,

	TOKEN_WHILE,
	TOKEN_DO,
	TOKEN_FOR,
	TOKEN_BREAK,
	TOKEN_CONTINUE,
	TOKEN_IF,
	TOKEN_ELSE,

	TOKEN_ASSERT,

	//Literals
	TOKEN_IDENTIFIER,
	TOKEN_LITERAL_INTEGER,
	TOKEN_LITERAL_FLOAT,
	TOKEN_LITERAL_STRING,
	TOKEN_LITERAL_STRING_INTERPOLATED,
	TOKEN_LITERAL_TRUE,
	TOKEN_LITERAL_FALSE,

	//math operators
	TOKEN_PLUS,
	TOKEN_PLUS_PLUS,
	TOKEN_PLUS_EQUAL,

	TOKEN_MINUS,
	TOKEN_MINUS_MINUS,
	TOKEN_MINUS_EQUAL,

	TOKEN_MULTIPLY,
	TOKEN_MULTIPLY_EQUAL,

	TOKEN_DIVIDE,
	TOKEN_DIVIDE_EQUAL,

	TOKEN_MODULO,
	TOKEN_MODULO_EQUAL,

	//logical operators
	TOKEN_PAREN_LEFT,
	TOKEN_PAREN_RIGHT,
	TOKEN_BRACKET_LEFT,
	TOKEN_BRACKET_RIGHT,
	TOKEN_BRACE_LEFT,
	TOKEN_BRACE_RIGHT,

	TOKEN_NOT,
	TOKEN_NOT_EQUAL,

	TOKEN_EQUAL,
	TOKEN_EQUAL_EQUAL,

	TOKEN_LESS,
	TOKEN_LESS_EQUAL,
	TOKEN_GREATER,
	TOKEN_GREATER_EQUAL,

	TOKEN_AND,
	TOKEN_AND_AND,
	TOKEN_OR,
	TOKEN_OR_OR,

	//extra operators
	TOKEN_QUESTION,
	TOKEN_COLON,
	TOKEN_SEMICOLON,
	TOKEN_COMMA,
	TOKEN_DOT,

	//meta operators
	TOKEN_PASS,
	TOKEN_ERROR,
	TOKEN_EOF
} TokenType;

#endif //TOY_TOKEN_TYPE_H_
