//print the fibonacci numbers
const fibonacci = (n) => {
	if (n <= 1) return n;
	return fibonacci(n - 2) + fibonacci(n - 1);
};

for (var i = 0; i < 20; i++) {
	print fibonacci(i);
}

for (var i = 0; i < 10; i++) ;

var hello = () => {print "hello";};
var identity = x => x;
var empty = () => {};
var call = cb => cb();
var f = function () {};

a => { print a; }("barfoo");

hello();
print identity("a");
f();
call(empty);
call(hello);


var makeCounter = function() {
	var count = 0;
	return () => {
		return ++count;
	};
};

var counter = makeCounter();

print counter(); //1
print counter(); //2
print counter(); //3


var str = "";

for (var i = 0; i < 10; i++) {
	str += "x";
	print str;
}

print "-----TESTING ARRAY-----";
import "Array";

const array = Array();

array.Push(1);
array.Push(2);
array.Push(3);
array.Push(4);
array.Push(5);
array.Push(4);
array.Push(3);
array.Push(2);
array.Push(1);

print array;

print array.Pop();

print array;

array.Unshift("Hello world");

print array;

print array.Shift();

print array;
print array.Length();

array.Insert(1, "x");

print array;

array.Delete(1);

print array;

print array;
array.Sort((a, b) => a - b); //NOTE: only works with number arrays
print array;

print array.ToString() + array.ToString();

import "Standard" as std;

print std.Clock();

for (var i = 0; i < 10; i++) {
	std.RandomSeed(1.1);
	print std.Random();
}

print "-----TESTING INDEXING-----";
var arr = Array();

arr.Push(1);
arr.Push(2);
arr.Push(3);
arr.Push(4);
arr.Push(5);

print arr[1];
print arr[1:3];
print arr[1:3:-1];
print arr[:];
print arr[::-1];

//arr[2] = "hello world";

//TODO: arrays[start:stop:step]
//TODO: dictionaries
//TODO: handle circular structures (especially with ToString())
//TODO: import/module system (external toy files)
//TODO: built in methods (or libraries) for string, array and dictionary manipulation
//TODO: type casting (number, string, array, etc.)
//TODO: equality between arrays and dictionaries

//TODO: maths library
//TODO: JSON library
//TODO: foreach(var element in object) //foreach(var char in "string")
//TODO: foreach(var index of object)

//TODO: assert as a Standard function
//TODO: default arugments
//TODO: rest/spread operator
//TODO: destructuring
//TODO: MAYBE promises
//TODO: MAYBE coroutines
//TODO: MAYBE regex
//TODO: MAYBE template strings
//TODO: MAYBE namespaces
//TODO: MAYBE break x;
//TODO: MAYBE continue x;
//TODO: How would I do generics?
//TODO: automatic properties?

